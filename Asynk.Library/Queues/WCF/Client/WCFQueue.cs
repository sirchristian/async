#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://codeplex.com/Asynk", ClrNamespace="Asynk.Library.Queues.WCF.Client")]

namespace Asynk.Library.Queues.WCF.Client
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ASynkQueueItem", Namespace="http://codeplex.com/Asynk")]
    public partial class ASynkQueueItem : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] ArgumentsField;
        
        private string AssemblyNameField;
        
        private string FullTypeNameField;
        
        private System.Guid IdField;
        
        private string MethodNameField;
        
        private string ObjField;
        
        private int TimesCalledField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Arguments
        {
            get
            {
                return this.ArgumentsField;
            }
            set
            {
                this.ArgumentsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssemblyName
        {
            get
            {
                return this.AssemblyNameField;
            }
            set
            {
                this.AssemblyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullTypeName
        {
            get
            {
                return this.FullTypeNameField;
            }
            set
            {
                this.FullTypeNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MethodName
        {
            get
            {
                return this.MethodNameField;
            }
            set
            {
                this.MethodNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Obj
        {
            get
            {
                return this.ObjField;
            }
            set
            {
                this.ObjField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimesCalled
        {
            get
            {
                return this.TimesCalledField;
            }
            set
            {
                this.TimesCalledField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://codeplex.com/Asynk", ConfigurationName="Asynk.Library.Queues.WCF.Client.WCFQueue")]
    public interface WCFQueue
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://codeplex.com/Asynk/WCFQueue/Push", ReplyAction="http://codeplex.com/Asynk/WCFQueue/PushResponse")]
        void Push(Asynk.Library.Queues.WCF.Client.ASynkQueueItem item);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://codeplex.com/Asynk/WCFQueue/Push", ReplyAction="http://codeplex.com/Asynk/WCFQueue/PushResponse")]
        System.IAsyncResult BeginPush(Asynk.Library.Queues.WCF.Client.ASynkQueueItem item, System.AsyncCallback callback, object asyncState);
        
        void EndPush(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://codeplex.com/Asynk/WCFQueue/Pop", ReplyAction="http://codeplex.com/Asynk/WCFQueue/PopResponse")]
        Asynk.Library.Queues.WCF.Client.ASynkQueueItem Pop();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://codeplex.com/Asynk/WCFQueue/Pop", ReplyAction="http://codeplex.com/Asynk/WCFQueue/PopResponse")]
        System.IAsyncResult BeginPop(System.AsyncCallback callback, object asyncState);
        
        Asynk.Library.Queues.WCF.Client.ASynkQueueItem EndPop(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://codeplex.com/Asynk/WCFQueue/Count", ReplyAction="http://codeplex.com/Asynk/WCFQueue/CountResponse")]
        int Count();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://codeplex.com/Asynk/WCFQueue/Count", ReplyAction="http://codeplex.com/Asynk/WCFQueue/CountResponse")]
        System.IAsyncResult BeginCount(System.AsyncCallback callback, object asyncState);
        
        int EndCount(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface WCFQueueChannel : Asynk.Library.Queues.WCF.Client.WCFQueue, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class PopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public PopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public Asynk.Library.Queues.WCF.Client.ASynkQueueItem Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((Asynk.Library.Queues.WCF.Client.ASynkQueueItem)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public int Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class WCFQueueClient : System.ServiceModel.ClientBase<Asynk.Library.Queues.WCF.Client.WCFQueue>, Asynk.Library.Queues.WCF.Client.WCFQueue
    {
        
        private BeginOperationDelegate onBeginPushDelegate;
        
        private EndOperationDelegate onEndPushDelegate;
        
        private System.Threading.SendOrPostCallback onPushCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopDelegate;
        
        private EndOperationDelegate onEndPopDelegate;
        
        private System.Threading.SendOrPostCallback onPopCompletedDelegate;
        
        private BeginOperationDelegate onBeginCountDelegate;
        
        private EndOperationDelegate onEndCountDelegate;
        
        private System.Threading.SendOrPostCallback onCountCompletedDelegate;
        
        public WCFQueueClient()
        {
        }
        
        public WCFQueueClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public WCFQueueClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public WCFQueueClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public WCFQueueClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PushCompleted;
        
        public event System.EventHandler<PopCompletedEventArgs> PopCompleted;
        
        public event System.EventHandler<CountCompletedEventArgs> CountCompleted;
        
        public void Push(Asynk.Library.Queues.WCF.Client.ASynkQueueItem item)
        {
            base.Channel.Push(item);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPush(Asynk.Library.Queues.WCF.Client.ASynkQueueItem item, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginPush(item, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPush(System.IAsyncResult result)
        {
            base.Channel.EndPush(result);
        }
        
        private System.IAsyncResult OnBeginPush(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            Asynk.Library.Queues.WCF.Client.ASynkQueueItem item = ((Asynk.Library.Queues.WCF.Client.ASynkQueueItem)(inValues[0]));
            return this.BeginPush(item, callback, asyncState);
        }
        
        private object[] OnEndPush(System.IAsyncResult result)
        {
            this.EndPush(result);
            return null;
        }
        
        private void OnPushCompleted(object state)
        {
            if ((this.PushCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PushCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PushAsync(Asynk.Library.Queues.WCF.Client.ASynkQueueItem item)
        {
            this.PushAsync(item, null);
        }
        
        public void PushAsync(Asynk.Library.Queues.WCF.Client.ASynkQueueItem item, object userState)
        {
            if ((this.onBeginPushDelegate == null))
            {
                this.onBeginPushDelegate = new BeginOperationDelegate(this.OnBeginPush);
            }
            if ((this.onEndPushDelegate == null))
            {
                this.onEndPushDelegate = new EndOperationDelegate(this.OnEndPush);
            }
            if ((this.onPushCompletedDelegate == null))
            {
                this.onPushCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPushCompleted);
            }
            base.InvokeAsync(this.onBeginPushDelegate, new object[] {
                        item}, this.onEndPushDelegate, this.onPushCompletedDelegate, userState);
        }
        
        public Asynk.Library.Queues.WCF.Client.ASynkQueueItem Pop()
        {
            return base.Channel.Pop();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPop(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginPop(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Asynk.Library.Queues.WCF.Client.ASynkQueueItem EndPop(System.IAsyncResult result)
        {
            return base.Channel.EndPop(result);
        }
        
        private System.IAsyncResult OnBeginPop(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginPop(callback, asyncState);
        }
        
        private object[] OnEndPop(System.IAsyncResult result)
        {
            Asynk.Library.Queues.WCF.Client.ASynkQueueItem retVal = this.EndPop(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPopCompleted(object state)
        {
            if ((this.PopCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopCompleted(this, new PopCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopAsync()
        {
            this.PopAsync(null);
        }
        
        public void PopAsync(object userState)
        {
            if ((this.onBeginPopDelegate == null))
            {
                this.onBeginPopDelegate = new BeginOperationDelegate(this.OnBeginPop);
            }
            if ((this.onEndPopDelegate == null))
            {
                this.onEndPopDelegate = new EndOperationDelegate(this.OnEndPop);
            }
            if ((this.onPopCompletedDelegate == null))
            {
                this.onPopCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopCompleted);
            }
            base.InvokeAsync(this.onBeginPopDelegate, null, this.onEndPopDelegate, this.onPopCompletedDelegate, userState);
        }
        
        public int Count()
        {
            return base.Channel.Count();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCount(System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginCount(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndCount(System.IAsyncResult result)
        {
            return base.Channel.EndCount(result);
        }
        
        private System.IAsyncResult OnBeginCount(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginCount(callback, asyncState);
        }
        
        private object[] OnEndCount(System.IAsyncResult result)
        {
            int retVal = this.EndCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCountCompleted(object state)
        {
            if ((this.CountCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CountCompleted(this, new CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CountAsync()
        {
            this.CountAsync(null);
        }
        
        public void CountAsync(object userState)
        {
            if ((this.onBeginCountDelegate == null))
            {
                this.onBeginCountDelegate = new BeginOperationDelegate(this.OnBeginCount);
            }
            if ((this.onEndCountDelegate == null))
            {
                this.onEndCountDelegate = new EndOperationDelegate(this.OnEndCount);
            }
            if ((this.onCountCompletedDelegate == null))
            {
                this.onCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCountCompleted);
            }
            base.InvokeAsync(this.onBeginCountDelegate, null, this.onEndCountDelegate, this.onCountCompletedDelegate, userState);
        }
    }
}

